Todo:
  ✔ Move api into this project. @done(20-03-16 07:18)
  ✔ Extract parsing into it's own service @started(20-03-16 07:20) @done(20-03-16 08:27) @lasted(1h7m20s)
  ✔ Create a query builder @started(20-03-16 08:35) @done(20-03-16 11:41) @lasted(3h6m18s)
  ✔ Turn parsed address into solr query @done(20-03-16 12:18)
  ✔ Use geocoder for autocomplete to test addresses / performance @done(20-03-19 09:24)
  ✔ Create a reverse geocode enpoint @done(20-03-19 10:23)
  ☐ Add ability to handle street intersections
    ✔ Export road data from PostGIS @done(20-03-24 16:15)
    ✔ Create a specialized configset for roads @done(20-03-24 16:22)
    ✔ Import road data into solr @done(20-03-24 17:12)
    ✔ Detect and parse intersection queries @started(20-03-25 06:15) @done(20-03-25 08:10) @lasted(1h55m11s)
    ✔ Search Solr for streets on both sides of the intersection (because it is fast) @started(20-03-25 08:10) @done(20-03-25 08:36) @lasted(26m29s)
    ✔ Search PostGIS for intersections from Solr results (because it is simple & fast) @started(20-03-25 08:37) @done(20-03-25 10:21) @lasted(1h44m21s)
    ✔ Update ui placeholder to add intersection (decided it would be best to not show this) @done(20-03-25 10:28)
  ☐ Add ability to handle longitude/latitude
  ☐ Compare openaddresses with what we have.
  ☐ Boundaries in solr
  ☐ Interpolation of addresses
  ☐ Create a batch endpoint
  ☐ Rename everything from geocoder to addresses for addresses
  ☐ Can we do what we're doing with only a AddrComplete field? ***
  ☐ Figure out st/saint, mt/mount for roads like "saint vrain street" or "mount lincoln street, palisade"
  ☐ Make an ArcGIS compatible endpoint
  ☐ CLI: core should be an argument and not an option. (i.e. create-core addresses vs create-core -c addresses)
  ☐ CLI: fix it so it is useful ( don't expose solr internals)
  ☐ Find a way to have common configset files
  ☐ Fix import errors
  ☐ Trim down the index
  ☐ Create example env files

Performance:
  ☐ Re-training usaddress with our data
  ☐ Create a new parser with TensorFlow
  ☐ Squeeze performance with Fastify (schemas)
  ☐ Do we gain speed from running this as Java?